如上图所示，我们需要新建三个类ActionSprite、Hero、Robot，其中ActionSprite既然是“动作精灵”所以需要继承cocos2d的Sprite类。
原本我想ActionSprite类只负责调用精灵每个动作的动画，精灵的“攻击力”、“生命值”、“移动”等属性方法放到另一个新的类当中管理，但为了省事我还是决定把这些内容完全塞到ActionSprite当中（尽管我知道这是一种灾难，但是。。。让bug来得更猛烈些吧！谁让我懒呢）。
首先，新建三个类ActionSprite、Hero、Robot
ActionSprite.h
// 根据pd_sprites.plist得到，动作精灵有五种状态typedef enum {    ACTION_STATE_NONE = 0,    ACTION_STATE_IDLE,    ACTION_STATE_WALK,    ACTION_STATE_ATTACK,    ACTION_STATE_HURT,    ACTION_STATE_KNOCKOUT,} ActionState;class ActionSprite : public cocos2d::Sprite{public:    ActionSprite();    ~ActionSprite();    void idle();    void walk(cocos2d::Point direction);    void attack();    void hurt(int damage);    void knockout();    // 定义每个状态动作的get/set方法    CC_SYNTHESIZE_RETAIN(cocos2d::Action*, _idleAction, IdleAction);    CC_SYNTHESIZE_RETAIN(cocos2d::Action*, _attackAction, AttackAction);    CC_SYNTHESIZE_RETAIN(cocos2d::Action*, _hurtAction, HurtAction);    CC_SYNTHESIZE_RETAIN(cocos2d::Action*, _knockoutAction, KnockoutAction);    CC_SYNTHESIZE_RETAIN(cocos2d::Action*, _walkAction, WalkAction);    // 精灵的当前状态    CC_SYNTHESIZE(ActionState, _currentState, ActionState);    CC_SYNTHESIZE(float, _velocity, Velocity); // 移动速度    CC_SYNTHESIZE(cocos2d::Point, _direction, Direction); // 移动方向（向量）    CC_SYNTHESIZE(unsigned int, _hp, HP); // 生命值    CC_SYNTHESIZE(unsigned int, _atk, ATK); // 攻击力
protected:    
// 定义一个创建状态动画的方法    
// fmt   - 状态的图片名格式(查看pd_sprites.plist,每种状态格式都类似hero_idle_xx.png)    
// count - 状态图片序列的数量    
// fps   - 动画的播放帧率    
static cocos2d::Animation *createAnimation(const char *fmt, int count, float fps);
private:    
// 切换演员的当前状态    
bool _changeState(ActionState state);
};
然后是具体ActionSprite的实现，要注意动作切换时的基本逻辑关系，例如某个角色已经挂了，就不能在执行其他动作了！还有一点要非常小心，尤其是用惯了cocos2d-x以前的版本，SpriteFrameCache::sharedSpriteFrameCache这个函数已经不能用了（尽管编译时能通过）如果沿用以前的代码，会有大麻烦！！所以用SpriteFrameCache::getInstance()代替。ccp这个坐标宏也不能用了，我现在用Point(x, y)代替。
ActionSprite.cpp
ActionSprite::ActionSprite()
{ 
   _idleAction = NULL; 
   _walkAction = NULL;  
   _attackAction = NULL;  
   _hurtAction = NULL;  
   _knockoutAction = NULL;
}
ActionSprite::~ActionSprite()
{}
void ActionSprite::idle()
{    
if (_changeState(ACTION_STATE_IDLE)) 
{        
	runAction(_idleAction);  
      _velocity = Point(0, 0); 
	  }
	  }
void ActionSprite::attack()
{    
if (_changeState(ACTION_STATE_ATTACK))


{      
  runAction(_attackAction);
	  }}
	  
	  void ActionSprite::walk(Point direction)
	  {    
	  if (_changeState(ACTION_STATE_WALK)) 
	  {        
	  runAction(_walkAction);    
	  _direction = direction;        // 根据精灵的x向量，来判断精灵的正面“朝向”       
	  _direction.x > 0 ? setFlipX(true) : setFlipX(false);    }}
	  
	  
	  void ActionSprite::hurt(int damage)
	  {    if (_changeState(ACTION_STATE_HURT)) {        runAction(_hurtAction);        _hp -= damage;        if (_hp <= 0) {            knockout();        }    }}void ActionSprite::knockout(){    if (_changeState(ACTION_STATE_KNOCKOUT)) {        runAction(_knockoutAction);    }}bool ActionSprite::_changeState(ActionState state){    bool ret = false;    // 精灵已经被击倒（Game Over），就不能再出发其他动作了！    if (_currentState == ACTION_STATE_KNOCKOUT) {        goto change_state_failed;    }    // 精灵已经处于要改变的状态，就没必要在改变了！    if (_currentState == state) {        goto change_state_failed;    }    // 改变动作之前，先停止所有动作    this->stopAllActions();    _currentState = state;    ret = true;change_state_failed:    return ret;}Animation *ActionSprite::createAnimation(const char *fmt, int count, float fps){    Array *frames = Array::createWithCapacity(count);    int i = 0;    for (i = 0; i < count; i++) {        const char *png = String::createWithFormat(fmt, i)->getCString();        SpriteFrame *frame = SpriteFrameCache::getInstance()->getSpriteFrameByName(png);        frames->addObject(frame);    }    return Animation::createWithSpriteFrames(frames, 1 / fps);}
1.2.1 英雄